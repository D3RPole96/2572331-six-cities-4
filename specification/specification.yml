openapi: 3.1.0
info:
  title: API сервер для демо-проекта «Шесть городов».
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
tags:
  - name: offers
    description: Действия с объявлениями
  - name: comments
    description: Действия с комментариями
  - name: users
    description: Действия с пользователем
  - name: favorites
    description: Управление избранными предложениями

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Создание нового пользователя
      description: Регистрирует нового пользователя

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true
      responses:
        "201":
          description: Пользователь зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "400":
          description: Неверные данные пользователя
        "409":
          description: Пользователь с таким email уже существует

  /users/login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе email и пароля
      requestBody:
        description: Данные для авторизации
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  required: true
                password:
                  type: string
                  required: true
        required: true
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Неверные учетные данные

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Информация о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

  /users/logout:
    post:
      tags:
        - users
      summary: Выход из закрытой части приложения (только если авторизация выполняется на основе сессий)
      description: Завершает пользовательский сеанс
      security:
        - bearerAuth: [ ]
      responses:
        '204':
          description: Успешный выход
        '401':
          description: Пользователь не авторизован

  /offers:
    get:
      tags:
        - offers
      summary: Список предложений по аренде
      description: Возвращает список предложений по аренде
      parameters:
        - name: limit
          in: query
          description: Количество возвращаемых предложений
          schema:
            type: integer
            default: 60

      responses:
        '200':
          description: Список предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerShort'

    post:
      tags:
        - offers
      summary: Создание нового предложения
      description: Создает новое предложение по аренде
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Данные для создания предложения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOffer'
        required: true
      responses:
        '201':
          description: Предложение создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        '400':
          description: Неверные данные предложения
        '401':
          description: Пользователь не авторизован

  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Детальная информация по предложению
      description: Возвращает полную информацию по предложению
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Детальная информация по предложению
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        '404':
          description: Предложение не найдено

    patch:
      tags:
        - offers
      summary: Редактирование предложения
      description: Обновляет информацию по предложению
      security:
        - bearerAuth: [ ]
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Обновленные данные предложения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateOffer'
        required: true
      responses:
        '200':
          description: Предложение обновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        '400':
          description: Неверные данные предложения
        '401':
          description: Пользователь не авторизован
        '403':
          description: Нет прав на редактирование
        '404':
          description: Предложение не найдено

    delete:
      tags:
        - offers
      summary: Удаление предложения
      description: Удаляет предложение по аренде
      security:
        - bearerAuth: [ ]
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Предложение удалено
        '401':
          description: Пользователь не авторизован
        '403':
          description: Нет прав на удаление
        '404':
          description: Предложение не найдено

  /offers/premium/{city}:
    get:
      tags:
        - offers
      summary: Премиальные предложения для города
      description: Возвращает список премиальных предложений для указанного города
      parameters:
        - name: city
          in: path
          required: true
          schema:
            type: string
            enum: [ Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf ]
      responses:
        '200':
          description: Список премиальных предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offerShort'

  /offers/{offerId}/comments:
    get:
      tags:
        - comments
      summary: Список комментариев для предложения
      description: Возвращает список комментариев для указанного предложения
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Список комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'
        '404':
          description: Предложение не найдено

    post:
      tags:
        - comments
      summary: Добавление комментария
      description: Добавляет новый комментарий к предложению
      security:
        - bearerAuth: [ ]
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Данные для создания комментария
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createComment'
        required: true
      responses:
        '201':
          description: Комментарий добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        '400':
          description: Неверные данные комментария
        '401':
          description: Пользователь не авторизован
        '404':
          description: Предложение не найдено


components:
  schemas:
    createUser:
      type: object
      required:
        - name
        - email
        - password
        - type
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 15
          example: Ilya Lagunov
        email:
          type: string
          format: email
          example: kyultex@example.com
        avatar:
          type: string
          format: binary
          description: Изображение в формате .jpg или .png
        password:
          type: string
          minLength: 6
          maxLength: 12
          example: 123456
        type:
          type: string
          enum: [ обычный, pro ]
          example: обычный

    user:
      type: object
      properties:
        id:
          type: string
          example: 5093d60c-1c2a-4a38-b680-450713afb68c
        name:
          type: string
          example: Ilya Lagunov
        email:
          type: string
          example: kyultex@example.com
        avatar:
          type: string
          example: /static/avatar.jpg
        type:
          type: string
          example: обычный

    createOffer:
      type: object
      required:
        - title
        - description
        - city
        - previewImage
        - images
        - isPremium
        - type
        - bedrooms
        - maxAdults
        - price
        - goods
        - location
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
          example: Beautiful apartment in city center
        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: This is a beautiful apartment located in the heart of the city.
        city:
          type: string
          enum: [ Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf ]
          example: Paris
        previewImage:
          type: string
          example: /static/preview.jpg
        images:
          type: array
          items:
            type: string
          minItems: 6
          maxItems: 6
          example: [ "/static/image1.jpg", "/static/image2.jpg", "/static/image3.jpg", "/static/image4.jpg", "/static/image5.jpg", "/static/image6.jpg" ]
        isPremium:
          type: boolean
          example: true
        type:
          type: string
          enum: [ apartment, house, room, hotel ]
          example: apartment
        bedrooms:
          type: integer
          minimum: 1
          maximum: 8
          example: 2
        maxAdults:
          type: integer
          minimum: 1
          maximum: 10
          example: 4
        price:
          type: integer
          minimum: 100
          maximum: 100000
          example: 1500
        goods:
          type: array
          items:
            type: string
            enum: [ Breakfast, Air conditioning, Laptop friendly workspace, Baby seat, Washer, Towels, Fridge ]
          minItems: 1
          example: [ Breakfast, Air conditioning ]
        location:
          type: object
          properties:
            latitude:
              type: number
              example: 48.85661
            longitude:
              type: number
              example: 2.351499
          required:
            - latitude
            - longitude

    offer:
      type: object
      properties:
        id:
          type: string
          example: 5093d60c-1c2a-4a38-b680-450713afb68c
        title:
          type: string
          example: Beautiful apartment in city center
        description:
          type: string
          example: This is a beautiful apartment located in the heart of the city
        city:
          type: string
          example: Paris
        previewImage:
          type: string
          example: /static/preview.jpg
        images:
          type: array
          items:
            type: string
          example: [ "/static/image1.jpg", "/static/image2.jpg", "/static/image3.jpg", "/static/image4.jpg", "/static/image5.jpg", "/static/image6.jpg" ]
        isPremium:
          type: boolean
          example: true
        isFavorite:
          type: boolean
          example: false
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 4.5
        type:
          type: string
          example: apartment
        bedrooms:
          type: integer
          example: 2
        maxAdults:
          type: integer
          example: 4
        price:
          type: integer
          example: 1500
        goods:
          type: array
          items:
            type: string
          example: [ Breakfast, Air conditioning ]
        author:
          $ref: '#/components/schemas/user'
        commentsCount:
          type: integer
          example: 5
        location:
          type: object
          properties:
            latitude:
              type: number
              example: 48.85661
            longitude:
              type: number
              example: 2.351499

    offerShort:
      type: object
      properties:
        id:
          type: string
          example: 5093d60c-1c2a-4a38-b680-450713afb68c
        title:
          type: string
          example: Beautiful apartment in city center
        postDate:
          type: string
          format: date-time
          example: 2025-05-11T21:22:00Z
        city:
          type: string
          example: Paris
        previewImage:
          type: string
          example: /static/preview.jpg
        isPremium:
          type: boolean
          example: true
        isFavorite:
          type: boolean
          example: false
        rating:
          type: number
          example: 4.5
        type:
          type: string
          example: apartment
        price:
          type: integer
          example: 1500
        commentsCount:
          type: integer
          example: 5

    updateOffer:
      type: object
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
          example: Updated beautiful apartment
        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Updated description of the apartment
        isPremium:
          type: boolean
          example: false
        type:
          type: string
          enum: [ apartment, house, room, hotel ]
          example: apartment
        bedrooms:
          type: integer
          minimum: 1
          maximum: 8
          example: 3
        maxAdults:
          type: integer
          minimum: 1
          maximum: 10
          example: 5
        price:
          type: integer
          minimum: 100
          maximum: 100000
          example: 2000
        goods:
          type: array
          items:
            type: string
            enum: [ Breakfast, Air conditioning, Laptop friendly workspace, Baby seat, Washer, Towels, Fridge ]
          minItems: 1
          example: [ Breakfast, Air conditioning, Washer ]

    createComment:
      type: object
      required:
        - text
        - rating
      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
          example: This is a great place to stay!
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5

    comment:
      type: object
      properties:
        id:
          type: string
          example: 5093d60c-1c2a-4a38-b680-450713afb68c
        text:
          type: string
          example: This is a great place to stay!
        postDate:
          type: string
          format: date-time
          example: 2025-05-11T21:22:00Z
        rating:
          type: integer
          example: 5
        author:
          $ref: '#/components/schemas/user'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
